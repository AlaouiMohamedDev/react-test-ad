const apiUrl = 'http://localhost:1995/adserver/api/v2/list/'; 
const eventUrl = 'http://localhost:1995/adserver/api/v2/event/'; 

(function () {
    // const startTime = performance.now();

    const clientId = document.currentScript.getAttribute('data-client-id');
    const client_params = {
        clientId: clientId,
        view_threshold: 0.5,
        view_duration_image: 1,
        view_duration_video: 2,
        attribution: "post_view",
    };
    const queryParams = new URLSearchParams(window.location.search);

    window.trygrClientParams = client_params;
    // Enregistrer les paramÃ¨tres de debug et de test dans le localStorage
    const debugMode = queryParams.get('eretail_debug');
    const testMode = queryParams.get('eretail_test');
    // const debugMode = getDebugMode();

    if (debugMode) localStorage.setItem('eretail_debug', debugMode);
    if (testMode) localStorage.setItem('eretail_test', testMode);

    let placementCounter = 0;
    let emptyPlacementCounter = 0;
    let lineItemCounter = 0;
    let campaignCounter = 0;

    function getDebugMode() {
        var localStorageDebug = localStorage.getItem('eretail_debug');
        if (localStorageDebug === 'on') {
            return true;
        }
        return false;
    }


    function addTinySlider() {
        const script = document.createElement('script');
        script.type = 'text/javascript';
        script.id = 'trygr-tinyslider-script';
        script.src = "https://cdnjs.cloudflare.com/ajax/libs/tiny-slider/2.9.2/min/tiny-slider.js";
        script.async = true;
        document.head.appendChild(script);
    }


    function sendEvent(event) {
        fetch(eventUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(event)
        })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(error => {
                        throw new Error(`Error sending event: ${error.message}`);
                    });
                }
                // Si le statut est 204, il n'y a pas de contenu Ã  lire, donc on ne fait rien
            })
            .catch(error => console.error(error));
    }

    // Affiche le bandeau de debug si nÃ©cessaire
    function showDebugBanner(executionTime) {
        if (localStorage.getItem('eretail_debug') === 'on') {
            const debugBanner = document.createElement('div');
            debugBanner.style.position = 'fixed';
            debugBanner.style.top = '0';
            debugBanner.style.left = '0';
            debugBanner.style.width = '100%';
            debugBanner.style.backgroundColor = 'blue';
            debugBanner.style.color = 'white';
            debugBanner.style.textAlign = 'center';
            debugBanner.style.zIndex = '9999';
            // debugBanner.textContent = 'Debug Mode - Execution Time: ' + executionTime.toFixed(2) + 'ms' + ' | ' + 'Placements: ' + placementCounter + ' (Empty Placements: ' + emptyPlacementCounter + ') | ' + 'Line Items: ' + lineItemCounter + ' | ' + 'Campaigns: ' + campaignCounter;
            debugBanner.textContent = 'Debug Mode - Execution Time: ' + executionTime.toFixed(2) + 'ms';

            // Calculer la hauteur de la barre de debug
            // Cela doit Ãªtre fait aprÃ¨s que le debugBanner soit ajoutÃ© au DOM pour mesurer sa hauteur
            window.addEventListener('DOMContentLoaded', function () {
                document.body.prepend(debugBanner);
                // Utiliser setTimeout pour s'assurer que le calcul de la hauteur se fait aprÃ¨s que le debugBanner est rendu
                setTimeout(() => {
                    const bannerHeight = debugBanner.offsetHeight;
                    // document.body.style.paddingTop = `${bannerHeight}px`;
                }, 0);
            });
        }
    }

    // Fonction pour rÃ©cupÃ©rer des informations sur l'utilisateur
    function getUserInfo() {
        return {
            browser: navigator.userAgent,
            client_id: clientId,
            url: window.location.href,
            debug: localStorage.getItem('eretail_debug') === 'on' ? true : false,
            test: localStorage.getItem('eretail_test') === 'on' ? true : false
        };
    }

    // Fonction pour afficher le mode debug
    function toggleDebugInfo() {
        if (debugMode) {
            // Affichez vos informations de debug ici
            console.log("Mode Debug ActivÃ©");
        }
    }

    function insertPlacements(placements) {
        // Pour chaque placement
        placements.forEach(placement => {
            // Trouver l'ancre du placement
            const anchor = document.querySelector(placement.anchor);

            // Si l'ancre est trouvÃ©e
            if (anchor) {
                // CrÃ©er un nouvel Ã©lÃ©ment HTML pour le placement
                let htmlElement = document.createElement('div');
                htmlElement.setAttribute('data-trygr-insert', placement.uuid);
                htmlElement.classList.add('trygr-placement');
                htmlElement.style.width = '100%';
                // htmlElement.id = placement.uuid; // Utiliser l'UUID du placement comme ID pour l'Ã©lÃ©ment HTML

                // InsÃ©rer l'Ã©lÃ©ment HTML Ã  l'emplacement spÃ©cifiÃ©
                switch (placement.position) {
                    case 'before':
                        anchor.insertAdjacentElement('beforebegin', htmlElement);
                        placementCounter++;
                        emptyPlacementCounter++;
                        break;
                    case 'after':
                        anchor.insertAdjacentElement('afterend', htmlElement);
                        placementCounter++;
                        emptyPlacementCounter++;
                        break;
                    case 'prepend':
                        anchor.insertAdjacentElement('afterbegin', htmlElement);
                        placementCounter++;
                        emptyPlacementCounter++;
                        break;
                    case 'append':
                        anchor.insertAdjacentElement('beforeend', htmlElement);
                        placementCounter++;
                        emptyPlacementCounter++;
                        break;
                    default:
                        console.error(`Position ${placement.position} non reconnue`);
                }
                console.log('Placement:', placementCounter, 'Empty Placements:', emptyPlacementCounter);
            } else {
                console.error(`Ancre ${placement.anchor} non trouvÃ©e`);
            }
        });
    }

    function insertAdIntoPlacement(ad) {
        // Trouver le placement correspondant
        // const placement = placements.find(p => p.uuid === ad.placement);
        const placement = document.querySelector(`[data-trygr-insert="${ad.placement}"]`);
        // Si un placement correspondant est trouvÃ©
        if (placement) {
            // CrÃ©er un nouvel Ã©lÃ©ment HTML pour l'annonce
            // let htmlElement = document.createElement('div');
            // htmlElement.innerHTML = ad.html;
            // placement.innerHTML = ad.html;
            // lineItemCounter++;
            // emptyPlacementCounter--;
            if (localStorage.getItem('eretail_debug') === 'on') {
                placement.innerHTML = ad.html;
                lineItemCounter++;
                emptyPlacementCounter--;
                if (ad.status === 'testing') {
                    placement.style.border = '1px solid rgba(252,185,0,1)'; // orange
                    placement.style.position = 'relative';

                    const adLabel = document.createElement('div');
                    adLabel.textContent = 'TRYGR. Ad | TESTING';
                    adLabel.style.zIndex = '100';
                    adLabel.style.fontSize = '12px';
                    adLabel.style.fontWeight = 'bold';
                    adLabel.style.backgroundColor = 'rgba(252,185,0,1)';
                    adLabel.style.padding = '2px 2px';
                    adLabel.style.color = 'white';
                    adLabel.style.position = 'absolute';
                    adLabel.style.top = '0';
                    adLabel.style.left = '0';
                    // adLabel.style.transform = 'translateY(-100%)'; // DÃ©place l'Ã©tiquette vers le haut
                    adLabel.style.margin = '0'; // Supprime les marges

                    placement.prepend(adLabel);
                }
                else if (ad.status !== 'rejected') {
                    placement.style.border = '1px solid rgba(40, 116, 252,1)'; // blue
                    placement.style.position = 'relative';
                    // htmlElement.style.paddingTop = '20px'; // Ajoutez un espace pour l'Ã©tiquette

                    const adLabel = document.createElement('div');
                    adLabel.textContent = 'TRYGR. Ad | ' + ad.status;
                    adLabel.style.zIndex = '100';
                    adLabel.style.fontSize = '12px';
                    adLabel.style.fontWeight = 'bold';
                    adLabel.style.backgroundColor = 'rgba(40, 116, 252,1)';
                    adLabel.style.padding = '2px 2px';
                    adLabel.style.color = 'white';
                    adLabel.style.position = 'absolute';
                    adLabel.style.top = '0';
                    adLabel.style.left = '0';
                    // adLabel.style.transform = 'translateY(-100%)'; // DÃ©place l'Ã©tiquette vers le haut
                    adLabel.style.margin = '0'; // Supprime les marges
                    if (ad.is_test !== true) {
                        placement.prepend(adLabel);
                    }
                }

            } else {
                if (ad.status === 'approved') {
                    placement.innerHTML = ad.html;
                    lineItemCounter++;
                    emptyPlacementCounter--;
                }
            }
            if (ad.js) {
                const script = document.createElement('script');
                script.type = 'text/javascript';
                script.innerHTML = ad.js;
                document.head.appendChild(script);
            }
        } else {
            console.error(`Placement ${ad.placement} non trouvÃ©`);
        }
    }

    // Fonction pour charger le script preJS
    function loadPreJS() {
        // const preJsUrl = "URL_TO_PRE_JS"; // L'URL doit Ãªtre configurÃ©e sur votre serveur
        // const script = document.createElement('script');
        // script.src = preJsUrl;
        // document.head.appendChild(script);
    }

    // Fonction pour charger le script postJS
    function loadPostJS() {
        // const postJsUrl = "URL_TO_POST_JS"; // L'URL doit Ãªtre configurÃ©e sur votre serveur
        // const script = document.createElement('script');
        // script.src = postJsUrl;
        // document.head.appendChild(script);
    }

    // Fonction pour faire l'appel Ã  l'API avec les informations de l'utilisateur
    function callApi() {
        // console.log(getUserInfo());
        fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(getUserInfo())
        })
            .then(response => response.json())
            .then(data => {
                // Traitez les donnÃ©es reÃ§ues de votre API ici
                const tracking = data.tracking; // Script de tracking Ã  ajouter Ã  la page actuellement en String aprÃ¨s json.dumps

                if (tracking) {
                    const trackingScript = document.createElement('script');
                    trackingScript.type = 'text/javascript';
                    trackingScript.async = true;
                    trackingScript.id = 'trygr-tracking-script';
                    trackingScript.innerHTML = tracking;
                    document.head.appendChild(trackingScript);
                }

                const placements = data.placements;
                insertPlacements(placements);
                console.log("🚀 ~ callApi ~ data:", data)

                const ads = data.ads;
                console.log("🚀 ~ callApi ~ ads:", ads);

                if (localStorage.getItem('eretail_debug') === 'off') {
                    ads.forEach(ad => {
                        if (ad.status === 'approved') {
                            insertAdIntoPlacement(ad, placements);
                        }
                    });
                } else {
                    ads.forEach(ad => insertAdIntoPlacement(ad, placements));
                }
                // ads.forEach(ad => insertAdIntoPlacement(ad, placements));
            })
            .catch(error => console.error('Erreur lors de la rÃ©cupÃ©ration des donnÃ©es:', error))
            .finally(() => {
                // loadPostJS();
            });
    }

    // Fonction principale
    function main() {

        const startTime = performance.now();
        if (debugMode) {
            toggleDebugInfo();
        }
        addTinySlider();
        // loadPreJS();
        callApi(); // Appel Ã  l'API avec les informations de l'utilisateur

        const endTime = performance.now();
        showDebugBanner(endTime - startTime);
        // console.log('SDK loaded in:', endTime - startTime, 'ms');
        // console.log('Placements:', placementCounter, 'Empty Placements:', emptyPlacementCounter, 'Line Items:', lineItemCounter, 'Campaigns:', campaignCounter);
    }

    // Gestion du cache
    // if (!sessionStorage.getItem(`sdkLoaded-${clientId}`)) {
    //     main().then(() => {
    //         sessionStorage.setItem(`sdkLoaded-${clientId}`, Date.now().toString());
    //     });
    // } else {
    //     const loadedAt = parseInt(sessionStorage.getItem(`sdkLoaded-${clientId}`), 10);
    //     const isExpired = Date.now() - loadedAt > 86400000; // 24 heures en millisecondes

    //     if (isExpired) {
    //         sessionStorage.removeItem(`sdkLoaded-${clientId}`);
    //         main().then(() => {
    //             sessionStorage.setItem(`sdkLoaded-${clientId}`, Date.now().toString());
    //         });
    //     }
    // }

    main();
    window.sendEvent = sendEvent;
})();